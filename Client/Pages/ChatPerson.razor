@page "/chat/{Id}"
@using BlazorChat.Shared.Dtos
@using BlazorChat.ViewModels
@inject NavigationManager navigationManager
@inject IChatPersonViewModel _chatPersonViewModel
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client;

@if (_chatPersonViewModel.LoadingGet)
{
  <Spin />
}
else
{
  // banner to show current user
  <div class="alert alert-secondary mt-4" role="alert">
    <span class="oi oi-person mr-2" aria-hidden="true"></span>
    <span>You are connected as <b>@_chatPersonViewModel.SenderName</b></span>
    <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
  </div>
  // display messages
  <div id="scrollbox">
    @if(_chatPersonViewModel.Messages != null && _chatPersonViewModel.Messages.Count > 0) {
      @foreach (var message in _chatPersonViewModel.Messages)
      {
        @if (message.IsNotice)
      {
        <div class="alert alert-info">@message.Text</div>
      } else {
        <Comment Author="@message.Sender" Avatar="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png"
          Content="@message.Text" Datetime="@message.Sent.ToString("dddd, dd MM yyyy HH:mm:ss")">
        </Comment>
        }
      }
    } 
    else if (!string.IsNullOrEmpty(@_chatPersonViewModel.ErrorMessage))
    {
      <AntDesign.Text Type="danger">@_chatPersonViewModel.ErrorMessage</AntDesign.Text>
    }
    else
    {
      <AntDesign.Text>No messages</AntDesign.Text>
    }
    <hr />
    <Row Align="bottom">
      <AntDesign.Col Md="16" Lg="14" Xl="12">
        <TextArea Placeholder="Message" MinRows="3" MaxRows="5" @bind-Value="@_chatPersonViewModel.Text"/>
      </AntDesign.Col>
      <AntDesign.Col Md="8" Lg="6" Offset="1">
          <Button Type="primary" @onclick="@(() => SendAsync(_chatPersonViewModel.Text))">Send</Button>
        </AntDesign.Col>
    </Row>
    <hr />
  </div>
}

@code {
  [Parameter]
  public string Id { get; set; }
  private string _hubUrl;
  private HubConnection _hubConnection;

  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    _chatPersonViewModel.ErrorMessage = string.Empty;

    var authState = await authenticationStateTask;
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      try
      {
        var userId = user.FindFirst(c => c.Type == "UserId")?.Value;
        _chatPersonViewModel.SenderName = user.Identity.Name;
        _chatPersonViewModel.SenderId = userId;
        _chatPersonViewModel.ChatId = Id;
        await _chatPersonViewModel.GetMessages();

        // Start chatting and force refresh UI.
        await Task.Delay(1);

        string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + "/chat";

        _hubConnection = new HubConnectionBuilder()
          .WithUrl(_hubUrl)
          .Build();

        _hubConnection.On<string, string, string>("Broadcast", BroadcastMessage);

        await _hubConnection.StartAsync();

        //await SendAsync($"[Notice] {_chatPersonViewModel.SenderName} joined chat room.");
      }
      catch (Exception e)
      {
        _chatPersonViewModel.ErrorMessage = $"ERROR: Failed to start chat client: {e.Message}";
        _chatPersonViewModel.LoadingGet = false;

      }
    }
    else
    {
      NavigationManager.NavigateTo("/");
    }
  }
  // flag to indicate chat status

  private void BroadcastMessage(string reciverId, string senderName, string message)
  {
    _chatPersonViewModel.Messages.Add(new MessageDto(senderName, message));
    // Inform blazor the UI needs updating
    StateHasChanged();
  }

  private async Task DisconnectAsync()
  {
    await SendAsync($"[Notice] {_chatPersonViewModel.SenderName} left chat room.");

    await _hubConnection.StopAsync();
    await _hubConnection.DisposeAsync();

    _hubConnection = null;
  }

  private async Task SendAsync(string message)
  {
    if (!string.IsNullOrWhiteSpace(message))
    {
      await _chatPersonViewModel.SendMessage();
      await _hubConnection.SendAsync("Broadcast", _chatPersonViewModel.RecieverId, _chatPersonViewModel.SenderName, message);

      _chatPersonViewModel.Text = string.Empty;
    }
  }

}