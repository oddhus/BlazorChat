@page "/chat/{Id}"
@using BlazorChat.Shared.Dtos
@using BlazorChat.ViewModels
@inject NavigationManager navigationManager
@inject IChatPersonViewModel _chatPersonViewModel
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client;

@if(_chatPersonViewModel.LoadingGet)
{
    <Spin />
} else {
// banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_chatPersonViewModel.SenderName</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var message in _chatPersonViewModel.Messages)
        {
            @if (message.IsNotice)
            {
                <div class="alert alert-info">@message.Text</div>
            }
            else
            {
                <div>
                    <div class="user">@message.Sender</div>
                    <div class="msg">@message.Text</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_chatPersonViewModel.Text"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_chatPersonViewModel.Text))">Send</button>
    </div>
}  

@code {
  [Parameter]
  public string Id { get; set; }
  private string _hubUrl;
  private HubConnection _hubConnection;

  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    var authState = await authenticationStateTask;
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      try
      {
      var userId = user.FindFirst(c => c.Type == "UserId")?.Value;
      _chatPersonViewModel.SenderId = userId;
      _chatPersonViewModel.ChatId = Id;
      await _chatPersonViewModel.GetMessages();
      
      // Start chatting and force refresh UI.
      await Task.Delay(1);

      string baseUrl = navigationManager.BaseUri;

        _hubUrl = baseUrl.TrimEnd('/') + "/chat";

        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_hubUrl)
        .Build();

        _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

        await _hubConnection.StartAsync();

        await SendAsync($"[Notice] test joined chat room.");
      }
      catch (Exception e)
      {
         _chatPersonViewModel.ErrorMessage = $"ERROR: Failed to start chat client: {e.Message}";
      }
    }
    else
    {
      NavigationManager.NavigateTo("/");
    }
  }
    // flag to indicate chat status

    private void BroadcastMessage(string name, string message)
    {
      _chatPersonViewModel.Messages.Add(new MessageDto(_chatPersonViewModel.RecieverId, message));
      // Inform blazor the UI needs updating
      StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        await SendAsync($"[Notice] test left chat room.");

        await _hubConnection.StopAsync();
        await _hubConnection.DisposeAsync();

        _hubConnection = null;
    }

    private async Task SendAsync(string message)
    {
      if (!string.IsNullOrWhiteSpace(message))
      {
        await _chatPersonViewModel.SendMessage();
        await _hubConnection.SendAsync("Broadcast", _chatPersonViewModel.RecieverId, message);

        _chatPersonViewModel.Text = string.Empty;
      }
    }

}