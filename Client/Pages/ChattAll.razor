@page "/chat-all"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<Title Level="1">Public Chat</Title>
<Text>Start chatting with anyone online!</Text>

<div>
    <Comment Avatar="@(@"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png")">
        <ContentTemplate>
            <div>
                <TextArea MinRows="4" @bind-Value="messageInput" />
                <br />
                <br />
                <Button Disabled="@(!IsConnected)" OnClick="Send " type="primary">
                    Add Comment
                </Button>
            </div>
        </ContentTemplate>
    </Comment>

    @if (messages.Count > 0)
    {
        <AntList DataSource="messages" TItem="Message">
            <ListItem>
                <Comment Avatar="@(@"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png")"
                    Author="@context.Author" Datetime="@context.Sent.ToString()" Content="@context.Content"></Comment>
            </ListItem>
        </AntList>
    }
</div>

@code {
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string userInput;
    private string messageInput;
    private string errorMessage;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                userInput = user.Identity.Name;

                hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                    .Build();

                hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
                    {
                    messages.Insert(0, new Message(user, message));
                    StateHasChanged();
                });

                await hubConnection.StartAsync();
            }
            catch (Exception e)
            {
                errorMessage = $"ERROR: Failed to start chat client: {e.Message}";
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    Task Send() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection != null && hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    class Message
    {
        public string Author { get; set; }
        public string Content { get; set; }
        public DateTime Sent { get; set; }
        public Message(string author, string content)
        {
            Author = author;
            Content = content;
            Sent = DateTime.Now;
        }
    }
}