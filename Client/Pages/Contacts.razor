@page "/contacts"
@using BlazorChat.Shared.Dtos
@using BlazorChat.ViewModels
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IContactsViewModel _contactsViewModel

<h1>Contacts</h1>

<p>This component demonstrates fetching data from the server.</p>

<Form LabelCol="new ColLayoutParam { Span = 4 }" WrapperCol="new ColLayoutParam { Span = 10 }"
  Model="@_contactsViewModel" OnFinish="@_contactsViewModel.AddContact">
  <FormItem Label="Firstname">
    <Input @bind-Value="@context.AddFirstname" />
  </FormItem>
  <FormItem Label="Lastname">
    <Input @bind-Value="@context.AddLastname" />
  </FormItem>
  <FormItem Label="Address">
    <Input @bind-Value="@context.AddAddress" />
  </FormItem>
  <FormItem WrapperCol="new ColLayoutParam { Span = 10, Offset=4 }">
    <Button Type="@ButtonType.Primary" HtmlType="submit">
      Add Contact
    </Button>
  </FormItem>
</Form>

@if (_contactsViewModel.Contacts == null)
{
  <div class="spinnerContainer">
    <Spin />
  </div>
}
else
{
  <AntList DataSource="@_contactsViewModel.Contacts" TItem="ContactDto">
    <ListItem>
      <ListItemMeta Avatar="avatar" Description="@context.Address">
        <TitleTemplate>
          <a href="/chat/@context.Firstname">@context.Firstname @context.Lastname</a>
        </TitleTemplate>
      </ListItemMeta>
    </ListItem>
  </AntList>
}

<style>
  .spinnerContainer {
    text-align: center;
    border-radius: 4px;
    margin-bottom: 20px;
    padding: 30px 50px;
    margin: 20px 0;
  }
</style>

@code {
  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    var authState = await authenticationStateTask;
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      var userId = user.FindFirst(c => c.Type == "UserId")?.Value;
      _contactsViewModel.UserId = userId;
      await _contactsViewModel.GetContacts();
    }
    else
    {
      NavigationManager.NavigateTo("/");
    }
  }
}
