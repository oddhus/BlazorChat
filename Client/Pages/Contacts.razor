@page "/contacts"
@using BlazorChat.Shared.Dtos
@using BlazorChat.ViewModels
@using System.ComponentModel
@using AntDesign.TableModels
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IContactsViewModel _contactsViewModel

<h1>Contacts</h1>

@if (@openAddContact)
{
  <Form WrapperCol="new ColLayoutParam { Span = 10 }" Model="@_contactsViewModel"
    OnFinish="@_contactsViewModel.FindUsers">
    <FormItem Label="Firstname">
      <Input @bind-Value="@context.SearchFirstname" />
    </FormItem>
    <FormItem Label="Lastname">
      <Input @bind-Value="@context.SearchLastname" />
    </FormItem>
    <FormItem WrapperCol="new ColLayoutParam { Span = 10}">
      <Button OnClick="(e)=>{openAddContact = false;}">Cancel</Button>
      <Button Type="@ButtonType.Primary" HtmlType="submit">
        Search
      </Button>
    </FormItem>
  </Form>
}

@if (_contactsViewModel.SearchResult != null && openAddContact)
{
  <AntList Bordered DataSource="@_contactsViewModel.SearchResult" Size="small">
    <Header>Result</Header>
    <ChildContent Context="item">
      <ListItem>
        <span>
          <Text Mark>
            <p>@item.Firstname @item.Lastname</p>
          </Text>
        </span>
        <Button OnClick="(e)=>{_contactsViewModel.AddContact(item.Id);}">Add</Button>
      </ListItem>
    </ChildContent>
  </AntList>
}

@if (!openAddContact)
{
  <Button OnClick="(e)=>{openAddContact = true;}">Add Contact</Button>
}

@if (_contactsViewModel.Contacts == null)
{
  <div class="spinnerContainer">
    <Spin />
  </div>
}
else
{
  <Table TItem="ContactDto" DataSource="@_contactsViewModel.Contacts">
    <Column @bind-Field="@context.Firstname">
      <a href="/chat/@context.ChatId">@context.Firstname</a>
    </Column>
    <Column @bind-Field="@context.Lastname"></Column>
    <Column @bind-Field="@context.Address">
      <TitleTemplate>
        <span>
          <Icon Type="environment" /> Address
        </span>
      </TitleTemplate>
    </Column>
    <Column @bind-Field="@context.ChatId" Title="Status">
      @if (@context.ChatId == null)
      {
              <Button OnClick="(e)=>{_contactsViewModel.StartChat(context.Id);}">Start chat</Button>
      }
      else
      {
              <Tag Color="green">Chatting</Tag>
      }
          </Column>
          <ActionColumn>
            <Space>
              <SpaceItem>
                <Button Danger OnClick="(e)=>{_contactsViewModel.DeleteContact(context.Id);}">Delete</Button>
              </SpaceItem>
            </Space>
          </ActionColumn>
        </Table>
}


<style>
  .spinnerContainer {
    text-align: center;
    border-radius: 4px;
    margin-bottom: 20px;
    padding: 30px 50px;
    margin: 20px 0;
  }
</style>

@code {
  [CascadingParameter]
  private Task<AuthenticationState> authenticationStateTask { get; set; }

  protected override async Task OnInitializedAsync()
  {
    var authState = await authenticationStateTask;
    var user = authState.User;

    if (user.Identity.IsAuthenticated)
    {
      var userId = user.FindFirst(c => c.Type == "UserId")?.Value;
      _contactsViewModel.UserId = userId;
      await _contactsViewModel.GetContacts();
    }
    else
    {
      NavigationManager.NavigateTo("/");
    }
  }
  [Parameter] public bool openAddContact { get; set; }

  void OnContactClick(string chatId)
  {
    NavigationManager.NavigateTo($"/chat/{chatId}");
  }
}
